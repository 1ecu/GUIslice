Notes on GUIslice code:
=======================

General
- The code is pure C but has been designed with object-oriented
  principles in mind.
- The GUIslice library doesn't require installation; just include
  the relevant files in your project and go!
- The core library does not use any dynamic memory allocation.
  Instead, all configurable storage data structures are allocated
  in user code and are passed in to GUIslice initialization routines.
- Callback functions are provided to support extending the
  base functionality.

Initialization
- Call gslc_Init() to associate the pages and element collections
  in user space with the GUI code.
- Create one or more pages with gslc_PageAdd()
- Create elements with gslc_ElemCreate*() which adds them to
  the specified page.

Main loop
- Periodically, the user should call gslc_Update() to refresh
  any graphic elements and handle any touch events.

Page Drawing
- Note that element drawing order is based on creation order
  within the current page.
- It is possible for elements to overlap, but note that care
  must then be taken to define the sequence of element creation.
- Clipping is only enabled following call to gslc_SetClipRect()
- The current page is redrawn with periodic calls to gslc_Update().
  This automatically redraws any elements that have been
  marked as changed. It then follows this up with a page flip.

  
Element Defaults
- The ElemCreate*() functions create a variety of objects with stylistic
  defaults applied (frame, fill, alignment, etc.) These can be overridden
  by calling the ElemSet*() functions after calling the default
  ElemCreate*() function.
- Callback functions can be specified for an element's Redraw and
  Touch events. Setting a callback to NULL disables the callback.
  When a callback is specified, the default functionality is disabled.

Memory Allocation
- GUIslice is intended to be an extremely simple library framework and
  thus avoids any dynamic memory allocation. The caller allocates storage
  for these elements and then passes pointers for the storage arrays
  to GUIslice.

Rendering Driver
- The GUIslice core is platform-independent in that it can theoretically
  be extended to support a number of different graphics drivers.
- Currently, the default driver is SDL1.2 for LINUX, but SDL2.0 (LINUX)
  and Adafruit-GFX (Arduino) are also supported.
- The user must select a display driver in the GUIslice_config.h file by
  uncomment one of the #define GSLC_DRV_DISP_* lines and ensure the
  associated include file (GUIslice_drv_*) is added to the project.


ARCHITECTURE

Element ID
- User-supplied ID given to an element when created
- IDs must be positive values and unique
- User functions generally reference an Element by
  its Element ID
- If no further reference is required to an element after
  creation, an auto-generated ID can be provided (GSLC_ID_AUTO)

GUI
- Contains the core library state
- Contains one or more pages

Pages
- Pages contain an element collection

Element Collection
- An element collection contains one or more elements

Element
- An element is a graphic item of type GSLC_TYPE_* that can
  be one of the core primitives (button, text, box, image, etc.)
  or one of the extended elements (checkbox, slider, etc.)
- An element can contain extended / custom data structures
  (stored in pXData).
- A compound element contains one or more sub-elements and is
  used to create complex widgets that encapsulate the internal
  operations between the sub-elements.
- A compound element can be created by adding an element
  collection to the extended data region. See example XSelNum for details.


