Notes on microSDL code:
=======================


Element ID
- User-supplied ID given to an element when created
- IDs must be positive values and unique
- User functions generally reference an Element by
  its Element ID
- If no further reference is required to an element after
  creation, an anonymous ID can be provided (MSDL_ID_ANON)

Element Index
- Internal index into array of elements
- Implementation converts Element ID into Element Index by
  searching for the ID

Pages
- Elements contain a reference to a Page ID
- The Page ID can also be specified as MSDL_PAGE_ALL if the
  element is to be drawn on all pages.
- Page drawing functions will redraw all elements associated
  with the page
- A current page ID member is provided to help manage transitions
  between pages and redrawing the active page.

Page Drawing
- Note that element drawing order is based on creation order
  (qualified by the specific page).
- It is possible for elements to overlap, but note that care
  must then be taken to define the sequence of element creation.
- To keep the library simple, clipping is not implemented at
  this time (except within Viewport)
- The current page is redrawn with periodic calls to PageRedrawGo().
  This automatically redraws any elements that have been
  marked as changed. It then follows this up with a page flip.
- Manual redraw is still possible by using ElemDraw() and then
  PageRedrawGo().
  
Element Defaults
- The ElemCreate*() functions create a variety of objects with stylistic
  defaults applied (frame, fill, alignment, etc.) These can be overridden
  by setting the Elem struct members after calling the default
  ElemCreate*() function.
- Callback functions can be specified for an element's Redraw and
  Touch events. Setting a callback to NULL disables the callback.
  When a callback is specified, the default functionality is disabled.

Event Loop
- The event loop is based on polling for touch events, tracking these
  transitions and invoking the page redraw periodically (PageRedrawGo).

Memory Allocation
- microSDL is intended to be an extremely simple library framework and
  thus avoids any dynamic memory allocation. The caller allocates storage
  for these elements and then passes pointers for the storage arrays
  to microSDL.

